#!/usr/bin/env python3

# Triangular, pentagonal, and hexagonal
# Problem 45
#
# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
#
# Triangle	    Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Pentagonal	 	Pn=n(3n-1)/2	1, 5, 12, 22, 35, ...
# Hexagonal	 	Hn=n(2n-1)	 	1, 6, 15, 28, 45, ...
# It can be verified that T285 = P165 = H143 = 40755.
#
# Find the next triangle number that is also pentagonal and hexagonal.

# Solution:
# T(n+1) = ... = T(n) + (n+1)
# P(n+1) = ... = P(n) + 3*(n+1) - 2
# H(n+1) = ... = H(n) + 4*(n+1) - 3
# Notice that H(n)  >= P(n) >= T(n).
# We start with H(143+1), P(165), T(285).
# We play 'catch up' game with H and P by checking all the P terms till the value is equal to current H term value.
# If we found a matching terms then we play the same 'catch up' game with H and T.
# If no match is found then we start over with the next H term.

from sys import exit


# Number class stores current value and index of a sequence
# and uses 'initFunction' to find the next term
class Number: 

    def __init__(self, initFunction, initIndex, initValue):
        self.index = initIndex
        self.value = initValue
        self.function = initFunction

    def get(self):
        return self.value

    def increment(self):
        self.index += 1
        self.value += self.function(self.index)


# T(n+1) = ... = T(n) + (n+1)
def fTriangle(n):
    return n


# P(n+1) = ... = P(n) + 3*(n+1) - 2
def fPentagonal(n):
    return 3*n - 2


# H(n+1) = ... = H(n) + 4*(n+1) - 3
def fHexagonal(n):
    return 4*n - 3

triangle = Number(fTriangle, 285, 40755)
pentagonal = Number(fPentagonal, 165, 40755)
hexagonal = Number(fHexagonal, 143, 40755)

hexagonal.increment()

while True:
    while hexagonal.get() > pentagonal.get():
        # H > P => increment P
        pentagonal.increment()
    if hexagonal.get() == pentagonal.get():
        # H == P => check T
        while hexagonal.get() > triangle.get():
            # H > T => increment T
            triangle.increment()
        if hexagonal.get() == triangle.get():
            # Solution found
            print ("Result:", hexagonal.get())
            exit()
        else:
            # H == P, but H < T => increment H
            hexagonal.increment()
    else:
        # H < P => increment H
        hexagonal.increment()

